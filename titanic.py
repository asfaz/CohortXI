# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvFH3-nkbJEGVpVqsoyYhLfoeFetLwWb

**Load the data**
"""

### Load Data
import pandas as pd
df = pd.read_csv('/content/sample_data/titanic3.csv')

df.head(10)

"""# Data Cleaning Steps

**Handling Missing Values**
"""

### Fills missing values in the 'Age' column with the median age.

df['age'].fillna(df['age'].median(), inplace=True)

"""**Removing Duplicates:**"""

### Removes duplicate rows from the dataset.
df.drop_duplicates(inplace=True)

"""**Correcting Data Types:**"""

### Converts the 'Pclass' column to a categorical data type.
df['pclass'] = df['pclass'].astype('category')

"""**Standardizing Formats:**"""

### Strips any leading/trailing spaces and converts all entries in the 'Embarked' column to uppercase.
df['embarked'] = df['embarked'].str.strip().str.upper()

"""**Filtering Outliers:**"""

### Caps the 'Fare' values at the 95th percentile to handle outliers.
fare_upper_limit = df['fare'].quantile(0.95)
df['fare'] = df['fare'].apply(lambda x: fare_upper_limit if x > fare_upper_limit else x)

"""**Handling Inconsistencies:**"""

### Converts all entries in the 'Name' column to title case (e.g., "john smith" to "John Smith").
df['name'] = df['name'].str.title()

"""**Replace 'Survived' column values:**"""

### Replaces values in the 'Survived' column: 0 becomes 'No' and 1 becomes 'Yes'.
df['survived'] = df['survived'].replace({0: 'No', 1: 'Yes'})

"""**Save the cleaned data to a new CSV file:**"""

### Saves the cleaned dataset to a new CSV file called 'titanic_cleaned.csv'.
df.to_csv('titanic_cleaned.csv', index=False)

"""**Print completion message:**"""

### Prints a message indicating that data cleaning is completed and the 'Survived' column has been updated.
print("Data cleaning completed and 'Survived' column updated. Saved to 'titanic_cleaned.csv'")

"""# Data  Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns

# Load the cleaned data
data = pd.read_csv('titanic_cleaned.csv')

# Univariate Analysis
plt.figure(figsize=(10, 6))
sns.histplot(df['age'], bins=20, kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Age Distribution This histogram provides a visual representation of the age distribution of Titanic passengers. The curve (KDE) gives an estimate of the probability density function of age, making it easy to see where most passengers' ages lie

# Bivariate Analysis
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='age', y='fare', hue='survived')
plt.title('Age vs Fare by Survival Status')
plt.xlabel('Age')
plt.ylabel('Fare')
plt.legend(title='Survived')
plt.show()

# Age vs Fare by Survival Status This scatter plot shows the relationship between age and fare, with different colors representing whether the passenger survived or not. It helps us understand how fare and age might have influenced survival chances.

# Optimizing Graphs: Titles, Labels, Legends, Colors, Size
plt.figure(figsize=(12, 8))
sns.boxplot(x='pclass', y='age', data=df, palette='Set3')
plt.title('Age Distribution by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Age')
plt.show()

# Age Distribution by Passenger Class This box plot displays the age distribution within each passenger class. It highlights the median age, and the spread of ages, and identifies any potential outliers within each class

# Impact of Removing Outliers
# Before removing outliers
plt.figure(figsize=(12, 6))
sns.boxplot(df['fare'])
plt.title('Fare Distribution Before Removing Outliers')
plt.xlabel('Fare')
plt.show()

# Fare Distribution Before Removing Outliers This box plot shows the fare distribution before outliers are removed, with potential outliers displayed as points outside the main range.

# Remove outliers
fare_upper_limit = df['fare'].quantile(0.95)
df_no_outliers = df[df['fare'] <= fare_upper_limit]

# After removing outliers
plt.figure(figsize=(12, 6))
sns.boxplot(df_no_outliers['fare'])
plt.title('Fare Distribution After Removing Outliers')
plt.xlabel('Fare')
plt.show()

# Fare Distribution After Removing Outliers This box plot displays the fare distribution after removing the outliers. Notice the reduction in extreme values, making the data cleaner and more robust for analysis

descriptive_stats = df.describe()
print(descriptive_stats)

import plotly.express as px

# Univariate Analysis - Age Distribution
fig = px.histogram(df, x='age', nbins=20, title='Age Distribution')
fig.show()

# Bivariate Analysis - Age vs Fare by Survival Status
fig = px.scatter(df, x='age', y='fare', color='survived', title='Age vs Fare by Survival Status')
fig.show()